Game Specifications document

CLASSES --------------------------------------------------------------------------------------------------

Alex
- Enemy
- Wumpus

Ashley
- Item manager (for info when interacted with)
- Sprite Sorting (combine w/ above?)
- Dialogue

- // game design document

Bharathi 
- // game design document 
- HUD
     - mini map? 
     - frickin screen fade have fun dude

Deepti
- GameControl

Kavi
- Map/Cave/Navigation/Location
     - maybe random generation if game design permits

Keerthana
- choose whatever you want


Other
- Scorekeeper (use .xml, or JSON)
- Menu and MainControl
- Player
- Weapon

GAME DESCRIPTION  ----------------------------------------------------------------------------------------
- Game takes place in a hospital where a zombie outbreak has occurred (maybe by some noxious gas in the air system)
- Player (may) start out being infected with the virus, and they have to escape the hospital (ie find help)
	before the virus completely overtakes their body. (Use a timer system or a sanity bar)
	Possible elements: 
		- If you want to keep the "clay" idea: player has tourniqueted "zombie" arm (arm got bitten off and is infected). 
			They can steal the arms of zombies they've killed and sew them onto their own arm for power ups
		- If sanity hits 0, player becomes a zombie. Player is more powerful when they are less sane (bc zombies > humans) so 
			you have to gamble like that
		- Player needs to stop the infection from spreading

GAME CONTROLS --------------------------------------------------------------------------------------------

what ever

tips :p  ---------------------------------------------------------------------------
https://www.gamasutra.com/blogs/HermanTulleken/20160812/279100/50_Tips_and_Best_Practices_for_Unity_2016_Edition.php (reaadd me)

	-  push and pull requests often to avoid merge conflicts (at least once an hour)
	-  keep the Update method as sparse as possible (it should only call methods; no logic)
	-  Create a prefab for every in-game object you make, in case it accidentally gets deleted. Remember to update the prefab as well
	-  We can't use System.Out.whatever so use Debug.Log("whatever") for debugging. This only works in MonoBehaviours though
	-  Delete the " : Monobehaviour " line from your script unless you actually need it to be a Monobehaviour

	-  Regardless of how many times you use the value, any specific number should be set to a private static readonly (final) variable. This also makes it easier to change the values later.
		-  e.g. private static readonly float PLAYER_SPEED = 4.8f;

	-  Renaming things in your code: don’t just delete the text and retype it. Right-click the method, variable, file, etc. you want to rename and press “rename”—this lets you rename all instances of the name at once.
		-  in Unity, you have to rename C# scripts twice: first, go to Unity right-click the script you want to rename and press “rename” (to rename the file name).
		-  Then, open the script and right-click its name to rename (rename the class’s name). Class and file names have to match.


